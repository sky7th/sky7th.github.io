---
layout: post
title:  "클린 코드"
subtitle:   "클린 코드"
categories: tip
tags: extra
---

### 좋은 코드란 ?  
> 논리가 간단하고 가독성이 높은 코드  

>내 코드 == 다른 개발자에게 나의 논리, 서비스의 개발 방식을 이야기하고 있는 책  

#### 주석  
- 메소드가 어떤 일을 하는지 서술하는게 아니라,  
- 기능이 생기게 된 배경, 사용하는 곳이 이해가 쉽게.  
- 특정 서비스에만 존재하는 일반적이지 않은 기능 만들 때.  
- 코드에서 도출할 수 없는 내용을 적는다  
- 코드와 주석의 싱크 맞추기

#### 깊이  
- n-depth 조건문 -> 1-depth 로직으로 최적화

#### 변수  
- 변수명 -> 담길 데이터를 나타내야 함 
- 과한 함축, 비슷한 단어 ㄴㄴ  

#### 메소드  
- 함수 이름 -> 어떤 일을 하는지 명확하게 드러나야 함
- **한 메소드** 내에서는 **한 가지** 기능만 명확하게 수행 <br> (아닐 경우, 메소드 확장 시 기능을 재활용하거나 분리하기 어려움)  
- 동사형으로 표현

#### DRY (Do not Repeat Yourself)  
- 같은 로직을 처리하는 코드가 여러 개일 경우, 중복을 최소화 한다.  

#### Formatting  

- 코드는 가독성을 해치지 않는 선에서 간결해야 함  

<br>


#### 살아있는 프로그램은 계속 변한다.
#### 꼭 변해야 하는 부분만 변해야 한다.  
- 비슷한 부분은 비슷한 부분끼리 모아놓자  
- 다른 부분들과의 결합은 필요한 만큼만 느슨하게 연결 <br> ('높은 응집도와 낮은 결합도' == 객체 지향의 설계 원리)  
- 높은 응집도 == 모듈, 이런 모듈들이 느슨하게 연결되어 레이어가 됨  
- 