---
layout: post
title:  "[알고리즘 문제 해결 전략] 08. 동적 계획법"
subtitle:   "[알고리즘 문제 해결 전략] 08. 동적 계획법"
categories: book
tags: jongman
---

## 메모이제이션 패턴  
```cpp
int cache[2500][2500];
int someObscureFunction(int a, int b) {
    if(...) 
        return ...;
    int& ret = cache[a][b];
    if(ret != -1) 
        return ret;
    // 답 계산
    ...
    ...
    return ret;
}
int main() {
    memset(cache, -1, sizeof(cache));
}
```

## 예제: 외발 뛰기 (하)

> 칸 숫자만큼 오른쪽 or 아래로 점프, 마지막 도달 가능 ?

재귀함수
```cpp
int n, board[100][100];
bool jump(int y, int x) {
    if(y >= n || x >= n) return false;
    if(y == n-1 && x == n-1) return true;
    int jumpSize = board[y][x];
    return jump(y + jumpSize, x) || jump(y, x + jumpSize);
}
```

동적 계획법  
```cpp
int n, board[100][100];
int cache[100][100];
int jump2(int y, int x) {
    if(y >= n || x >= n) return 0;
    if(y == n-1 && x == n-1) return 1;
    int& ret = cache[y][x];
    if(ret != -1) return ret;
    int jumpSize = board[y][x];
    return ret = jump2(y + jumpSize, x) || jump2(y, x + jumpSize);
}
```

## 8.2 문제: 와일드카드 (중)

he?p = help, *p = help = cap  
와일드카드 패턴에 대응되는 문자열 찾기


완전 탐색
```cpp
bool match(const string& w, const string& s) {
    int pos = 0;
    while(pos < w.size() && pos < s.size() && (w[pos] == '?' || w[pos] == s[pos]))
        ++pos;
    if(pos == w.size())
        return pos == s.size();
    if(w[pos] == '*')
        for(int skip = 0; pos+skip <= s.size(); ++skip)
            if(match(w.substr(pos+1), s.substr(pos+skip)))
                return true;
    return false;
}
```

동적 계획법  
```cpp
int cache[101][101];
string W, S;
bool matchMemorized(int w, int s) {
    int ret& = cache[w][s];
    if(ret != -1) return ret;
    while(s < S.size && w < w< W.size() && (W[w] == '?' || W[w] == S[s]) {
        ++w;
        ++s;
    }
    if(w == W.size()) return ret = (s == S.size());
    if(W[w] == '*')
        for(int skip = 0; skip+s <= S.size(); ++skip)
            if(matchMemorized(w+1, s+skip))
                return ret = 1;
    return ret = 0;

}
```

#### 최적화 문제란?
> 여러개의 가능한 답 중 가장 좋은 답(최적해)을 찾아내는 문제

## 예제: 삼각형 위의 최대 경로 (하)  
> 직각 삼각형 -> 아래, 오른쪽 이동 가능  
> 모든 경로 중 숫자 합 최대화하는 경로는 ? 합은 ?

```cpp
int n, triangle[100][100];
int cache[100][100];
int path(int y, int x) {
    if(y == n-1) return triangle[y][x];
    int& ret = cache[y][x];
    if(ret != -1) return ret;
    return ret = max(path(y+1, x), path(y+1, x+1)) + triangle[y][x];
}
```
완전 탐색 꼴이 되지 않도록 조심하자

#### 최적 부분 구조  
> 각 부분 문제의 최적해만 있으면 전체 문제의 최적해를 쉽게 얻어낼 수 있는 경우의 구조

## 예제: 최대 증가 부분 수열 (하)

완전 탐색  
```cpp
int lis(const vector<int>& A) {
    if(A.empty()) return 0;
    int ret = 0;
    for(int i = 0; i < A.size(); ++i) {
        vector<int> B;
        for(int j = i+1; j < A.size(); ++j)
            if(A[i] < A[j])
                B.push_back(A[j]);
        ret = max(ret, 1 + lis(B));
    }
    return ret;
}
```

동적 계획법  
```cpp
int n;
int cache[100], S[100];
int lis(int start) {
    int& ret = cache[start];
    if(ret != -1) return ret;
    ret = 1;
    for(int next = start+1; next < n; ++next)
        if(S[start] < S[next])
            ret = max(ret, lis(next) + 1);
    return ret;
}
int maxLen = 0;
for(int begin = 0; begin < n; ++begin)
    maxLen = max(maxLen, lis(begin));
```

## 8.5 문제: 합친 LIS (하)

> '1 9 4'와 '3 4 7' -> '1 3 4 7 9'

```cpp

```

## 8.7 문제: 원주율 외우기 (하)

```cpp
const int INF = 987654321;
string N;
int classify(int a, int b) {
  string M = N.substr(a, b-a+1);
  if(M == string(M.size(), M[0])) return 1;
  bool progressive = true;
  for(int i = 0; i < M.size-1; ++i) {
    if(M[i+1] - M[i] != M[1] - M[0])
      progressive = false;
    if(progressive && abs(M[1] - M[0]) == 1)
      return 2;
    bool alternating = true;
    for(int i = 0; i < M.size(); ++i)
      if(M[i] != M[i%2])
        alternating = false;
    if(alternating) return 4;
    if(progressive) return 5;
    return 10;
  }
  int cache[10002];
  int memorize(int begin) {
    if(begin == N.size()) return 0;
    int& ret = cache[begin];
    if(ret != -1) return ret;
    ret = INF;
    for(int L = 3; L <= 5; ++L) {
      if(begin + L <= N.size())
        ret = min(ret, classify(begin, begin + L - 1) + 
                       memorize(begin + L));
    return ret;
    }
  }
}
```

## 8.9 문제: Quantization (중)  

> 원본 수열의 포함된 수들의 범위가 1000 이하의 자연수 이므로 부분 문제가 너무 많아져서 완전 탐색으로는 불가능


>답의 형태를 제한해야 함


>한 개의 구간에 대한 답을 먼저 찾는다

```cpp
const INF = 987654321;
int n;
int A[101], pSum[101], pSqSum[100];
void precalc() {
  sort(A, A+n);
  pSum[0] = A[0];
  pSqSum[0] = A[0] * A[0];
  for(int i = 1; i < n; ++i) {
    pSum[i] = pSum[i-1] + A[i];
    pSqSum[i] = pSqSum[i-1] + A[i] * A[i];
  }
}
int minError(int lo, int hi) {
  int sum = pSum[hi] - (lo == 0 ? 0 : pSum[lo-1]);
  int sqSum = pSqSum[hi] - (lo == 0 ? 0 : pSqSum[lo-1]);
  int m = (int)(0.5 + (double)sum / (hi - lo + 1));
  int ret = sqSum - 2 * m * sum + m * m * (hi - lo + 1);
  return ret; 
}
int cache[101][11];
int quantize(int from, int parts) {
  if(from == n) return 0;
  if(parts == 0) return INF;
  int& ret = cache[from][parts];
  if(ret != -1) return ret;
  ret = INF;
  for(int partSize = 1; from + partSize <= n; ++partSize) {
    ret = min(ret, minError(from, from + partSize - 1) + 
                   quantize(from + partSize, part - 1));
  }
  return ret;
}
```

## 예제: 타일링 방법의 수 세기 (하)  
> 2 x n 크기의 사각형을 2 x 1 크기의 타일로 채우는 방법의 수  

```cpp
const int MOD = 1000000007;
int cache[101];
int tiling(int width) {
  if(width <= 1) return 1;
  int& ret = cache[width];
  if(ret != -1) return ret;
  return ret = (tiling(width-2) + tiling(width-1)) % MOD;
}
```


## 예제: 삼각형 위의 최대 경로 개수 세기 (중) 8.4++  
> 8.4 절 문제는 최대 경로의 합을 구했다.  
> 이 최대 경로의 개수를 구해보자

```cpp
int countCache[100][100];
int count(int y, int x) {
  if(y == n-1) return 1;
  int& ret = countCache[y][x];
  if(ret != -1) return ret;
  ret = 0;
  if(path(y+1, x+1) >= path(y+1, x)) ret += count(y+1, x+1);
  if(path(y+1, x+1) <= path(y+1, x)) ret += count(y+1, x);
  return ret;
}
```


## 예제: 우물을 기어오르는 달팽이

```cpp
int n,m;
int cache[MAX_N][2*MAX_N+1];
// 달팽이가 days일 동안 climbed미터를 기어올라 왔다고 할 때,
// m일 전까지 n미터를 기어올라갈 수 있는 경우의 수
int climb(int days, int climbed) {
  if(days == m) return climbed >= n ? 1 : 0;
  int& ret = cache[days][climbed];
  if(ret != -1) return ret;
  return ret = climb(days+1, climbed+1) + climb(days+1, climbed+2);
}
// 얻은 경우의 수를 2^m 으로 나누면 됨
```

## 8.13 풀이: 비대칭 타일링  
> 위에 타일링 변형 문제

```cpp
int asymmetric(int width) {
  if(width % 2 == 1)
    return (tiling(width) - tiling(width/2) + MOD);
    int ret = tiling(width);
    ret = (ret - tiling(width/2) + MOD) % MOD;
    ret = (ret - tiling(width/2 - 1) + MOD) % MOD;
    return ret;
}
```

MOD를 왜 미리 더해줄까 ??  
tiling()의 반환 값은 경우의 수 이므로 음수이면 안됨  



#### 스캐폴딩 테스트


## 8.14 폴리오미노 (중)

> 정사각형의 변을 서로 완전하게 붙여 만든 도형들을 폴리오미노 라고 부름

```cpp
const int MOD = 10*1000*1000;
int cache[101][101];
int poly(int n, int first) {
  if(n == first) return 1;
  int& ret = cache[n][first];
  if(ret != -1) return ret;
  ret = 0;
  for(int second = 1; second <= n-first; ++second) {
    int add = first + second - 1;
    add *= poly(n-first, second);
    add %= MOD;
    ret += add;
    ret %= MOD;
  }
  return ret;
}
```

## 8.16 문제: 두니발 박사의 탈옥 (중)


#### 완전 탐색  

```cpp
int n, d, p, q;
int connected[51][51], deg[51];
double search(vector<int>& path) {
  if(path.size() == d+1) {
    if(path.back() != q) return 0.0;
    double ret = 1.0;
    for(int i = 0; i+1 < path.size; ++i)
      ret /= deg[path[i]];
    return ret;
  }
  double ret = 0;
  for(int there = 0; there < n; ++there)
    if(connected[path.back()][there]) {
      path.push_back(there);
      ret += search(path);
      path.pop_back();
  }
  return ret;
}

```

#### 동적 계획법   
```cpp
int n, d, p, q;
double cache[51][101];
int connected[51][51], deg[51];
double search2(int here, int days) {
  if(days == d) return (here == q ? 1.0 : 0.0);
  double& ret = cache[here][days];
  if(ret > -0.5) return ret;
  ret = 0.0;
  for(int there = 0; there < n; ++there)
    if(connected[here][days])
      ret += search2(there, days+1) / deg[here];
  return ret;
}
```

#### 반대로 생각해보자  
```cpp
int n, d, p, q;
double cache[51][101];
int connected[51][51], deg[51];
double search3(int here, int days) {
  if(days == 0) return (here == p ? 1.0 : 0.0);
  double& ret = cache[here][days];
  if(ret > -0.5) return ret;
  ret = 0.0;
  for(int there = 0; there < n; ++there)
    if(connected[here][days])
      ret += search3(there, days-1) / deg[here];
  return ret;
}
```

#### 이론적 배경: 마르코프 연쇄  
> - 유한개의 상태가 있다  
> - 매 시간마다 상태가 변경된다  
> - 어떤 상태 a에서 다른 상태 b로 옮겨갈 확률은 현재 상태 a에만 좌우됨  
> - a 이전에 어느 상태에 있었는지, 현재 시간은 얼마인지 등은 영향을 주지 않음


