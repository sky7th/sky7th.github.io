---
layout: post
title:  "[React] 리액트 기본"
subtitle:   "[React] 리액트 기본"
categories: dev
tags: react
---

### 정석  

```js
//HTML
<div id="root"><div/>

// js
class FirstReact extends React.Component {
  render() {
    return (
      <h1>Hi! React~!</h1> // JSX
    )
  }
}

ReactDOM.render(<FirstReact/>, document.getElementById('root'));
```

### 함수형
```js
// js
function FirstReact() {
  return "Hi! React~!;
}
```

## props  
```js
function KaKaoFriends(props) {
  return (
    <h3>
      Name is {props.name}. Age is {props.age}  
    </h3>
  );
}
// 
Ryan.defaultProps = {
  name: '카카오 프렌즈',
  age: '?'
}

const ryan = {
  name: '라이언',
  age: '3'
}

ReactDOM.render(
  <KaKaoFriends 
  name={ryan.name}, 
  age={ryan.age}/>, 
  document.getElementById('root'));
```

## State   
```js
class Clock(props) extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      date: new Date()
    };
  }
  tick() {
    this.setState({
      date: new Date()
    });
  }
  componentDidMount() {
    this.timerID = setInterval(() => this.tick(), 1000);
  }
  componentWillUnmount() {
    clearInterval(this.timerID);
  }
  render() {
    return (
      <h3>
        현재 시간은 [{this.state.date.toLocalTimeString()}] 입니다.
      </h3>
    );
  }
}

ReactDOM.render(<Clock/>, document.getElementById('rood'));
```
<br>


return 안에 2개 이상 문법이 들어가면 `<div></div>` 로 묶어줌  
<br>
함수를 사용할 때는 bind() 처리를 꼭 해줌
```js
<button onClick={this.goBack.bind(this)}> 뒤로가기 </button>
```

## 마운팅  
> React 컴포넌트 객체가 DOM에 실제로 삽입되기 전까지의 과정  

#### 초기 상태 
```js
contructor()  
componentWillMount()  
render()  
componentDidMount()
```

API 호출은 componentDidMount() 에서 해야 효과적임

#### 데이터 변경  

```js
shouldComponentUpdate()
componentWillUpdate()  
render()  
componentDidUpdate()
```

#### 컴포넌트 해제  
```js 
componentWillUnmount()
```  
컴포넌트가 마운팅 해제될 때 수행되는 함수  
컴포넌트의 동작을 위해 사용되었던 메소드들의 리소스를 제거  
<br> 
보통, 애플리케이션의 성능 향상을 위해 사용 됨

### API 호출  

#### JSON  
> 서버와 클라이언트가 데이터를 주고 받을 때 사용할 수 있는 데이터 형식  

#### fetch  
> 클라이언트 상에서 특정한 서버에 접속하고자 할 때 사용

#### then  
> 얻은 데이터를 어떤 형식으로 저장할지, 어떻게 사용할지를 정함

```js
fetch('https://.................../......../.....')
  .then(reponse => reponse.json())
  .then(json => console.log(json))
```

## 이벤트 처리  
```js
class EventButton extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      isToggleOn: true
    }
  }
  buttonClick() {
    this.setState(state => ({
      isToggleOn: !this.state.isToggleOn
    }))
  }
  render() {
    return (
      <button onClick={this.buttonClick}>
        {this.state.isToggleOn ? ON : OFF}
      </button>
    )
  }
}

ReactDOM.render(<EventButton/>,
document.getElementById('root'));
```

```constructor()``` 함수 안에 ```this.buttonClick = this.buttonClick.bind(this);``` 하거나  
```buttonClick() {...}``` 를 buttonClick = () => {...} 로 바꿔서 bind 처리를 한다.

