---
layout: post
title:  "[알고리즘] Stack"
subtitle:   "[알고리즘] Stack"
categories: algo
tags: algorithm
---
## 스택

```cpp
#include <cstdlib>
#include <iostream>
using namespace std;

class UnderflowException();

template <typename T>
class ListNode {
   public:
    T value;
    ListNode<T> *next;
    ListNode() : next(nullptr) {}
    ListNode(T value1, ListNode<T> *next1) : value(value1), next(next1) {}
};

template <typename T>
class Stack {
   public:
    int size;
    ListNode<T> *head;

    Stack<T>() : size(0), head(nullptr) {}
    ~Stack<T>() {
        ListNode<T> *t1 = head, *t2;
        while (t1 != nullptr) {
            t2 = t1->next;
            delete t1;
            t1 = t2;
        }
    }

    void push(T value) {
        head = new ListNode<T>(value, head);
        size++;
    }

    T top() {
        try {
            if(size == 0) throw UnderflowException();
            return head->value;
        }
        catch(UnderflowException e) {
            cerr << "Stack is empty!" << '\n';
            exit(1);
        }
    }

    void pop() {
        try {
            if (size == 0) throw UnderflowException();
            ListNode<T> *temp = head->next;
            delete head;
            head = temp;
            size--;
        }
        catch(UnderflowException e) {
            cerr << "Stack is empty!" << '\n';
            exit(2);
        }
    }
}
```

### 짧게

```cpp
#include <bits/stdc++.h>
using namespace std;

template <class T>
class _stack {
public :
    struct Node {
        T val;
        Node *next;
        Node() {}
        Node(T val): val(val), next(0){}
    };
    Node *head;
    int _size;
    _stack() {
        head = 0;
        _size = 0;
    }
    void push(T val) {
        Node *temp = new Node(val);
        if(head == 0) 
            head = temp;
        else {
            temp->next = head;
            head = temp;
        }
        _size++;
    }
    void pop() {
        Node *temp = head;
        head = head->next;
        delete temp;
        _size++;
    }
    bool empty() const {
        return _size == 0;
    }
    T top() const {
        return head->val;
    }
    T size() const {
        return _size;
    }
}
```