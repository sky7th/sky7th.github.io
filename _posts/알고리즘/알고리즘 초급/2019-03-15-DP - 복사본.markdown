---
layout: post
title:  "[알고리즘 중급] DP 2"
subtitle:   "[알고리즘 중급] DP 2"
categories: algo
tags: middle
---
<details>
<summary> RGB 거리(+a) - 1149</summary>
<div markdown="1">   

```cpp
// 최소 비용만 출력
int RGB(int pos, int prev = 3) {
    int& ret = D[pos][prev];
    if (ret != -1) return ret;
    if (pos == N) return ret = 0;
    ret = INF;
    for (int i = 0; i < 3; i++)
        if (prev != i) ret = min(ret, RGB(pos+1, i) + cost[pos][i]);
    return ret;
}
// 최소 비용의 건물 색상 배치 출력
void trackAnswer(int pos, int prev=3){
    if(pos == N) return;
 
    for(int i=0; i<3; i++){
        if(prev != i && RGB(pos+1, i) + cost[pos][i] == RGB(pos, prev)){
            printf("%dth town color: %d\n", pos+1, i);
            trackAnswer(pos+1, i);
            return;
        }
    }
}

// RGB 또 다른 풀이
{...
    for(int i = 0; i < n; i++) cin >> s[i][0] >> s[i][1] >> s[i][2];
    d[0][0] = s[0][0];
    d[0][1] = s[0][1];
    d[0][2] = s[0][2];
    for(int i = 1; i < n; i++){
        d[i][0] = min(d[i-1][1],d[i-1][2])+s[i][0];
        d[i][1] = min(d[i-1][0],d[i-1][2])+s[i][1];
        d[i][2] = min(d[i-1][0],d[i-1][1])+s[i][2];
    }
    ...
}
```  
</div>
</details>



<details>
<summary> LCS 2 - 9252</summary>
<div markdown="1">   

```cpp
#include <bits/stdc++.h>
using namespace std;
char S1[1001], S2[1001];
int len1, len2, cache[1000][1000], choose[1000];

int LCS(int pos1, int pos2) {
    if (pos1 == len1 || pos2 == len2) return 0;
    int &ret = cache[pos1][pos2];
    if (ret != -1) return ret;
    ret = LCS(pos1+1, pos2);
    int temp = LCS(pos1, pos2+1);
    if (ret < temp) {
        ret 
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    len1 = strlen(S1);
    len2 = strlen(S2);
    memset(cache, -1, sizeof(cache));
    cout << LCS(0, 0);
}
```  
</div>
</details>

<details>
<summary> 사회망 서비스(SNS) - 2533</summary>
<div markdown="1">   

```cpp
#include <bits/stdc++.h>
using namespace std;
const int INF = 987654321;

vector<int> adj[1000000], child[1000000];
bool visited[1000000];
int N, D[1000000][2];

void dfs(int curr) {
    visited[curr] = true;
    for (int next: adj[curr]){
        if (!visited[next]) {
            child[curr].push_back(next);
            dfs(next);
        }
    }
}

int SNS(int curr, bool early) {
    int& ret = D[curr][early];
    if (ret != -1) return ret;

    int notpick = INF, pick = 1;
    for (int next: child[curr])
        pick += SNS(next, true);
    if (!early) {
        notpick = 0;
        for (int next: child[curr])
            notpick += SNS(next, false);
    }
    return ret = min(notpick, pick);
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cin >> N;
    for (int i = 0; i < N-1; i++) {
        int u, v;
        cin >> u >> v;
        u--; v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dfs(0);
    memset(D, -1, sizeof(D));
    cout << SNS(0, true);
}
```  
</div>
</details>

<details>
<summary> </summary>
<div markdown="1">   

```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

}
```  
</div>
</details>

<details>
<summary> </summary>
<div markdown="1">   

```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

}
```  
</div>
</details>

<details>
<summary> </summary>
<div markdown="1">   

```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

}
```  
</div>
</details>