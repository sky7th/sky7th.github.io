---
layout: post
title:  "[자료구조] Stack, Queue, Priority Queue"
subtitle:   "[자료구조] Stack, Queue, Priority Queue"
categories: algo
tags: ds
---

## Stack 

```cpp
#include <stdio.h>

#define MAX_N 100

int top;
int stack[MAX_N];

void stackInit()
{
  top = 0;
}

int stackIsEmpty()
{
  return (top == 0);
}

int stackIsFull()
{
  return (top == MAX_N);
}

int stackPush(int value)
{
  if (stackIsFull())
  {
    printf("stack overflow!");
    return 0;
  }
  stack[top] = value;
  top++;

  return 1;
}

int stackPop(int *value)
{
  if (stackIsEmpty())
  {
    printf("stack is empty!");
    return 0;
  }
  top--;
  *value = stack[top];

  return 1;
}
```

## Queue

```cpp
#include <stdio.h>

#define MAX_N 100

int front;
int rear;
int queue[MAX_N];

void queueInit()
{
  front = 0;
  rear = 0;
}

int queueIsEmpty()
{
  return (front == rear);
}

int queueIsFull()
{
  if ((rear + 1) % MAX_N == front) 
    return 1;
  else return 0;
}

int queueEnqueue(int value)
{
  if (queueIsFull()) {
    printf("queue is full!");
    return 0;
  }
  queue[rear] = value;
  rear++;
  if (rear == MAX_N)
    rear = 0;
  return 1;
}

int queueDequeue(int *value)
{
  if (queueIsEmpty()) {
    printf("queue is empty!");
    return 0;
  }
  *value = queue[front];
  front++;
  if (front MAX_N) 
    front = 0;
  return 1;
}
```

## Priority Queue  
```cpp
#include <stdio.h>
#define MAX_SIZE 100

int heap[MAX_SIZE];
int heapSize = 0;

void heapInit()
{
  heapSize = 0;
}

void heapPush(int value)
{
  if (heapSize + 1 > MAX_SIZE) {
    printf("queue is full");
    return 0;
  }
  heap[heapSize] = value;
  int current = heapSize;
  while (current > 0 && heap[current] < heap[(current-1)/2]) {
    int temp = heap[(current-1)/2];
    heap[(current-1)/2] = heap[current];
    heap[current] = temp;
    current = (current - 1) / 2;
  }
  heapSize = heapSize + 1;
  return 1;
}

void heapPop(int *value)
{
  if (heapSize <= 0) return -1;
  *value = heap[0];
  heapSize = heapSize - 1;
  heap[0] = heap[heapSize];
  int current = 0;
  while (current*2 + 1 < heapSize) {
    int child;
    if (current*2 + 2 == heapSize) 
      child = current*2 + 1;
    else 
      child = heap[current*2 + 1] < heap[current*2 + 2] ? current*2 + 1 : current*2 + 2;
    if (heap[current] < heap[child]) 
      break;
    int temp = heap[current];
    heap[current] = heap[child];
    heap[child] = temp;

    current = child;
  }
  return 1;
}
```